// <auto-generated />
using System;
using JPW.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JPW.Migrations
{
    [DbContext(typeof(JPWContext))]
    partial class JPWContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InterviewLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InterviewTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JobSeekerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("JPW.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("AdminId");

                    b.HasIndex(new[] { "Email" }, "UQ__Admin__A9D105346811502C")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("JPW.Models.ApplyforJob", b =>
                {
                    b.Property<int>("AppliedJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppliedJobId"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("integer");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppliedJobId")
                        .HasName("PK__Applyfor__AF19BB4BF50E342A");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("ApplyforJobs");
                });

            modelBuilder.Entity("JPW.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompanyPhone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CompanyId");

                    b.HasIndex(new[] { "CompanyEmail" }, "UQ__Company__A1DB68DBF04BE8FE")
                        .IsUnique();

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("JPW.Models.JobMatch", b =>
                {
                    b.Property<int>("JobMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobMatchId"));

                    b.Property<int>("JobId")
                        .HasColumnType("integer");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("integer");

                    b.HasKey("JobMatchId");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobMatch", (string)null);
                });

            modelBuilder.Entity("JPW.Models.JobPosting", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("JobDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("JobExperienceLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobPayScale")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobSkillSet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("JobId")
                        .HasName("PK__JobPosti__056690C2FFF0EF52");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobPosting", (string)null);
                });

            modelBuilder.Entity("JPW.Models.JobSeeker", b =>
                {
                    b.Property<int>("JobSeekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JobSeekerId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("JobSeekerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Skills")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("JobSeekerId");

                    b.HasIndex(new[] { "Email" }, "UQ__JobSeeke__A9D10534B78294B6")
                        .IsUnique();

                    b.ToTable("JobSeeker", (string)null);
                });

            modelBuilder.Entity("JPW.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MessageId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageText")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("MessageId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("JPW.Models.ApplyforJob", b =>
                {
                    b.HasOne("JPW.Models.JobPosting", "Job")
                        .WithMany("ApplyforJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplyforJobs_JobPosting");

                    b.HasOne("JPW.Models.JobSeeker", "JobSeeker")
                        .WithMany("ApplyforJobs")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplyforJobs_JobSeeker");

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JPW.Models.JobMatch", b =>
                {
                    b.HasOne("JPW.Models.JobPosting", "Job")
                        .WithMany("JobMatches")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobMatch_JobPosting");

                    b.HasOne("JPW.Models.JobSeeker", "JobSeeker")
                        .WithMany("JobMatches")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobMatch_JobSeeker");

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JPW.Models.JobPosting", b =>
                {
                    b.HasOne("JPW.Models.Company", "Company")
                        .WithMany("JobPostings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobPosting_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JPW.Models.Message", b =>
                {
                    b.HasOne("JPW.Models.Company", "Company")
                        .WithMany("Messages")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Message_Company");

                    b.HasOne("JPW.Models.JobSeeker", "JobSeeker")
                        .WithMany("Messages")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Message_JobSeeker");

                    b.Navigation("Company");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JPW.Models.Company", b =>
                {
                    b.Navigation("JobPostings");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("JPW.Models.JobPosting", b =>
                {
                    b.Navigation("ApplyforJobs");

                    b.Navigation("JobMatches");
                });

            modelBuilder.Entity("JPW.Models.JobSeeker", b =>
                {
                    b.Navigation("ApplyforJobs");

                    b.Navigation("JobMatches");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
